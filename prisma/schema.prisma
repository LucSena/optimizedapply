generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accountType   AccountType @default(FREE)
  accounts      Account[]
  sessions      Session[]
  resumes       Resume[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum AccountType {
  FREE
  PREMIUM
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resume {
  id               String   @id @default(cuid())
  userId           String
  title            String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user             User @relation(fields: [userId], references: [id], onDelete: Cascade)
  personalInfo     PersonalInfo?
  professionalSummary ProfessionalSummary?
  workExperiences  WorkExperience[]
  educations       Education[]
  skills           Skill[]
  projects         Project[]
  languages        Language[]
  certifications   Certification[]
}

model PersonalInfo {
  id        String @id @default(cuid())
  resumeId  String @unique
  fullName  String
  email     String
  phone     String?
  address   String?
  linkedin  String?
  website   String?

  resume    Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model ProfessionalSummary {
  id        String @id @default(cuid())
  resumeId  String @unique
  summary   String @db.Text

  resume    Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model WorkExperience {
  id          String @id @default(cuid())
  resumeId    String
  company     String
  position    String
  startDate   DateTime
  endDate     DateTime?
  description String @db.Text

  resume      Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Education {
  id          String @id @default(cuid())
  resumeId    String
  institution String
  degree      String
  fieldOfStudy String
  startDate   DateTime
  endDate     DateTime?

  resume      Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Skill {
  id        String @id @default(cuid())
  resumeId  String
  name      String
  level     SkillLevel

  resume    Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Project {
  id          String @id @default(cuid())
  resumeId    String
  name        String
  description String @db.Text
  url         String?

  resume      Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Language {
  id        String @id @default(cuid())
  resumeId  String
  name      String
  level     LanguageLevel

  resume    Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

enum LanguageLevel {
  BASIC
  INTERMEDIATE
  ADVANCED
  FLUENT
  NATIVE
}

model Certification {
  id        String @id @default(cuid())
  resumeId  String
  name      String
  issuer    String
  date      DateTime

  resume    Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}